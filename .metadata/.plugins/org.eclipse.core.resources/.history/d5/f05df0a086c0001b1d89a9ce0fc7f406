package Main_Code;
import Logic_Of_Code.*;
import java.util.*;

import Logic_Of_Code.Red_Black_Tree.Node;

public class Red_Black_Tree_Main {
	public static Scanner sc=new Scanner(System.in);
	public static void menu(){
		System.out.println("Choose a task that you want to perform");
		System.out.println("1. Insert");
		System.out.println("2. Delete");
		System.out.println("3. Find");
		System.out.println("4. Height Of the Tree");
		System.out.println("5. Display");
		System.out.println("0. exit");
	}
	
	public static void flow(int type)throws Exception
	{
		int choice;
		int Idata;
		double Ddata;
		String Sdata;
		//boolean result=true;
		if(type==1)
		{
			Red_Black_Tree<Integer> rbti = new Red_Black_Tree<>();
			while(true)
			{
				menu();
				choice = sc.nextInt();
				switch(choice)
				{
					case 1:
							//Insert
							System.out.print("Enter the Integer you want to insert : ");
							Idata = sc.nextInt();
							/*try
							{*/
								boolean result =  rbti.searchTree(Idata);
						/*	}
							catch(Exception e)
							{
								e.printStackTrace();
							}*/
							if(result== false)
							{
								rbti.insert(Idata);
								System.out.println("Element Inserted successfully !!");
							}
							
							else{
								System.out.println("Element Already Exist");
							}
							break;

					case 2:
							//Delete
							System.out.print("Enter the Integer you want to delete : ");
							Idata = sc.nextInt();
							
							result = rbti.searchTree(Idata);
							if(result == false)
							{
								System.out.println("Element Doesn't Exist !!!");
								
							}
							
							else{
								rbti.deleteNode(Idata); 
								System.out.println("Element deteted!!");
							}
							break;
					
					case 3:
							//find
							System.out.print("Enter the Integer you want to find : ");
							Idata = sc.nextInt();
							
							result =  rbti.searchTree(Idata);
							if(result == false)
							{
								System.out.println("Element Doesn't Exist !!!");
								
							}
							else {
								System.out.println("Element Exist in Tree");
							}
							break;
					
					case 4:
							//Height
							int height=rbti.Height_Of_Tree();
							System.out.println("Height Of the Tree is :" +(height-1));
							break;
					
					case 5:
							//Display
							System.out.println("Red Black Tree Shown Below");
							rbti.printTree();
							break;
					
					case 0:
							break;
					
					default :
							System.out.println("Enter a valid Input");
							break;		
				}
			}
		}
		else if(type==2)
		{
			
		}
		else if(type==3)
		{
			
		}
		else
		{
			System.out.println("Invalid Choice");
			System.exit(0);
		}
	}
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Here Provide Some Data type for Red Black Tree Choose any one of them ");
		System.out.println("1.Integer");
		System.out.println("2.String");
		System.out.println("3.Double");
		System.out.println("Enter Your Choice for Data Type");
		int choice=sc.nextInt();
		Red_Black_Tree_Main.flow(choice);
		
		
		
		/*Red_Black_Tree<Integer> bst=new Red_Black_Tree<>();
		bst.insert(10);
		bst.insert(0);
		bst.insert(41);
		bst.insert(45);
		bst.insert(78);
		bst.insert(5);
		bst.insert(4);
		bst.printTree();*/
	}
}
